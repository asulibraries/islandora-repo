<?php

/**
 * @file
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\search_api\Entity\Index;
use Drupal\search_api\IndexInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\user\Entity\User;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_form_alter().
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function asu_search_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $current_path = \Drupal::service('path.current')->getPath();
  $node = \Drupal::routeMatch()->getParameter('node');
  if (!is_object($node) && $node) {
    $node = \Drupal::entityTypeManager()->getStorage('node')->load($node);
  }
  if ($form['#id'] == 'views-exposed-form-solr-search-content-page-3' || $form['#id'] == 'views-exposed-form-solr-search-content-page-4') {
    // Collection searching.
    // Since this block is configured to only display on content type = "Collection"
    // we don't need to check the node's content type.
    $new_search_path = ($node) ? '/collections/' . $node->id() . '/search/' : $current_path;
    $form['#action'] = $new_search_path;
  }
  elseif ($form['#id'] == 'views-exposed-form-solr-search-content-page-2') {
    // Complex object searching.
    // Since we cannot configure the block based on the node's model, we need to
    // check that here.
    $field_model_tid = $node->get('field_model')->getString();
    $field_model_term = Term::load($field_model_tid);
    $field_model = (isset($field_model_term) && is_object($field_model_term)) ?
      $field_model_term->getName() : '';
    if ($field_model == 'Complex Object') {
      $new_search_path = ($node) ? '/items/' . $node->id() . '/search/' : $current_path;
      $form['#action'] = $new_search_path;
    }
  }
}

/**
 * Implements hook_search_api_solr_field_mapping_alter().
 */
function asu_search_search_api_solr_field_mapping_alter(IndexInterface $index, array &$fields, string $language_id) {
  // Make file size and mime type multi-valued.
  $fields['field_file_size'] = 'itm_field_file_size';
  $fields['field_mime_type'] = 'sm_field_mime_type';
  $fields['institution_from_collection'] = 'sm_institution_from_collection';
  $fields['asu_issn'] = 'sm_asu_issn';
  $fields['asu_isbn'] = 'sm_asu_isbn';
  $fields['asu_local'] = 'sm_asu_local';
  $fields['asu_doi'] = 'sm_asu_doi';
  $fields['note_value'] = 'sm_note_value';
  $fields['parent_published'] = 'bs_parent_published';
  $fields['main_sub_title'] = 'sm_main_sub_title';
  $fields['asu_agent_aut'] = 'sm_asu_agent_aut';
  $fields['asu_agent_ths'] = 'sm_asu_agent_ths';
  $fields['asu_agent_dgc'] = 'sm_asu_agent_dgc';
  $fields['asu_identifier'] = 'sm_asu_identifier';
}

/**
 * Implements hook_preprocess_node().
 */
function asu_search_preprocess_node(&$variables) {
  if ($variables['node'] && $variables['node']->getType() == 'asu_repository_item') {
    $asu_utils = \Drupal::service('asu_utils');
    $variables['is_published'] = $asu_utils->isNodePublished($variables['node']);
    $allow_display_modes = ["search_result", "collection_browse_teaser", "recent_item_teaser", "recent_item_teaser_prism", "full_metadata"];
    if (!(array_search($variables['view_mode'], $allow_display_modes) === FALSE)) {
      if ($variables['view_mode'] == "recent_item_teaser" || $variables['view_mode'] == "full_metadata") {
        $date_formatter = \Drupal::service('date.formatter');
        $variables['changed_ago'] =
          $date_formatter->formatTimeDiffSince($variables['node']->getChangedTime(), ['granularity' => 2, 'return_as_object' => TRUE])->toRenderable();
      }
    }
    if ($variables['view_mode'] == 'asu_complex_object') {
      $childs = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties(['field_member_of' => $variables['node']->id()]);
      $count = count($childs);
      $variables['child_count'] = $count;
    }
  }
}

/**
 * To potentially suppress the "Matching Collections" block for any /search
 * that has had a facet filter applied to it.
 */
function asu_search_preprocess_views_view(&$variables) {
  if ($variables['id'] == "solr_search_content") {
    $view = $variables['view'];
    $search_displays = ['page_1', 'page_2', 'page_3', 'page_4'];
    if (!(array_search($view->current_display, $search_displays) === FALSE)) {
      // Get the query count and set a variable for output in a custom twig for
      // this view's header.
      $view->get_total_rows = TRUE;
      $view->execute($view->current_display);
      $variables['total_rows_formatted'] = number_format($view->total_rows ?? 0);

      // Inspect the query from the URL and if there are any facets, suppress
      // the inclusion of the collections block at the top of the /search page.
      $facet_filters = \Drupal::request()->query->all()['f'];
      if (is_array($facet_filters) && count($facet_filters) > 0) {
        // Since there are multiple header elements, check to be sure that the
        // "view" is in the header... and only get rid of the header element that
        // matches for a theme name of "view_view__solr_search_content__block_1".
        if (
          array_key_exists('view', $variables['header']) && !(array_search('views_view__solr_search_content__block_1', $variables['header']['view']['#theme']) === FALSE)
        ) {
          unset($variables['header']['view']);
        }
      }
      // Replace the numeric part with the formatted numeric part in h1.
      if (array_key_exists('area', $variables['header'])) {
        preg_match_all("/\([^\]]*\)/", strip_tags($variables['header']['area']['#text']), $matches);
        if (is_array($matches) && array_key_exists(0, $matches) && array_key_exists(0, $matches[0])) {
          $item_count = number_format(str_replace(['(', ')'], '', ($matches[0][0])));
          $variables['header']['area']['#text'] = '<h1 class="h1 search-header">Matching Items (' .
            $item_count . ')</h1>';
        }
      }
      // Also do this in the results summary if it is displayed.
      if (array_key_exists('result', $variables['header'])) {
        $temp = $variables['header']['result']['#markup'];
        $temp = str_replace(['Displaying ', ' - ', ' of '], '|', $temp);
        $temp_parts = explode("|", $temp);
        $variables['header']['result']['#markup'] =
          (array_key_exists(1, $temp_parts) ? 'Displaying ' . number_format($temp_parts[1]) : '') .
          (array_key_exists(2, $temp_parts) ? ' - ' . number_format($temp_parts[2]) : '') .
          (array_key_exists(3, $temp_parts) ? ' of ' . number_format($temp_parts[3]) : '');
      }
    }
  }
}

/**
 * Implements hook_views_pre_render().
 *
 * Adds metadata download links for relevant users.
 */
function asu_search_views_pre_render(ViewExecutable $view) {
  if ($view->id() == 'solr_search_content' && ($view->current_display === 'page_1' || $view->current_display === 'page_4')) {
    $results = $view->result;
    $ids = [];
    $user = User::load(\Drupal::currentUser()->id());
    $user_roles = $user->getRoles();
    if (in_array("administrator", $user_roles) || in_array("metadata_manager", $user_roles)) {
      foreach ($results as $r) {
        $ids[] = $r->_object->getEntity()->id();
      }
      $content_output = implode(",", $ids);
      $content_output = "<a href='/mods-xml/" . $content_output . "' target='_blank'>Export MODS XML</a>";
      if (array_key_exists('area_1', $view->header)) {
        $view->header['area_1']->options['content']['value'] = t($content_output);
        // Add a link to download the CSV export for the current search.
        $current_url = \Drupal::request()->getSchemeAndHttpHost() . Url::fromRoute('<current>')->toString();
        $query_parts = \Drupal::request()->query->all();
        $query_string_parts = [];
        foreach ($query_parts as $query_key => $query_value) {
          if (is_array($query_value)) {
            foreach ($query_value as $key_key => $query_value_value) {
              $query_string_parts[] = $query_key . '[' . $key_key . ']=' . $query_value_value;
            }
          }
          else {
            $query_string_parts[] = $query_key . '=' . $query_value;
          }
        }
        $query_string = implode("&", $query_string_parts);
        $view->header['area_1']->options['content']['value'] .= ' | ' . "<a href='" .
          $current_url . "/csv?" . $query_string . "' target='_blank'>Download CSV</a> &nbsp;" .
          "<a href='" . $current_url . "/csv?" . $query_string . " target='_blank'><i class='fas fa-file-export'></i></a>";
      }
    }
    else {
      if (array_key_exists('area_1', $view->header)) {
        $view->header['area_1']->options['content']['value'] = "";
      }
    }
  }
  // @todo may need to handle the complex object search page separately here.
}

/**
 * Implements hook_media_presave().
 *
 * Marks ancestor items of extracted text media for reindexing
 * when the extracted text field updates.
 */
function asu_search_media_presave($media) {
  if ($media->bundle() == 'extracted_text' && $media->hasField('field_edited_text') && !$media->get('field_edited_text')->isEmpty()) {
    if (!$media->get('field_edited_text')->equals($media->original->get('field_edited_text'))) {
      $iu = \Drupal::service('islandora.utils');
      $n = $iu->getParentNode($media);
      if (!$n) {
        return;
      }
      $to_reindex = [];
      // We don't need to reindex the parent, because the
      // islandora_text_extraction module does that for us,
      // but we still need to mark it's ancestors.
      foreach (Drupal::entityTypeManager()->getStorage('node')->loadMultiple($iu->findAncestors($n)) as $node) {
        if ($node->bundle() != 'asu_repository_item') {
          continue;
        }
        foreach ($node->getTranslationLanguages() as $language) {
          $to_reindex[] = "{$node->id()}:{$language->getId()}";
        }
      }
      Index::load('default_solr_index')->trackItemsUpdated('entity:node', $to_reindex);
    }
  }
}
