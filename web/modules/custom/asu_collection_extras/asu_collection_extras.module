<?php

/**
 * @file
 * Contains asu_collection_extras.module.
 */

use Drupal\search_api\Entity\Index;

/**
 * This is also used by the blocks in this module to get collection items.
 *
 * The main difference between this and corresponding `_get_node_membership`
 * is that this will get all children in one go without having to recursively
 * call thanks to the ancestors field.
 *
 * @param mixed $collection_node
 *   Can take a node object or the node ID value.
 *
 * @return array
 *   Multidimensional array that contains the nid, changed, and
 *   original_file_count for each child of the collection. The key of the top
 *   array is the nid. This array should be sorted by the changed timestamps
 *   so that the first element's changed value would be the most recent.
 */
function asu_collection_extras_solr_get_collection_children($collection_node) {
  $collection_node_id = (is_object($collection_node) ? $collection_node->id() : $collection_node);
  $result_set = [];
  if (!is_null($collection_node_id)) {
    $index = Index::load('default_solr_index');
    $server = $index->getServerInstance();
    $backend = $server->getBackend();
    $solrConnector = $backend->getSolrConnector();
    $solariumQuery = $solrConnector->getSelectQuery();
    $solariumQuery->addParam('q', '(itm_field_ancestors:' . $collection_node_id .
      ' OR itm_field_combined_member_of:' . $collection_node_id . ')');
    $solariumQuery->setFields(['its_nid', 'ds_changed']);
    $solariumQuery->addSort('ds_changed', 'desc');
    $facetSet = $solariumQuery->getFacetSet();
    $facetSet->createFacetField('model')->setField('itm_field_model');
    $count = 0;
    $models = [];
    $solariumQuery->setStart($count)->setRows(1);
    $nids = $solrConnector->execute($solariumQuery);
    $count = $nids->getNumFound();
    if ($count) {
      $first_record = $nids->getDocuments()[0];
      if ($first_record) {
        $result_set['recent_change'] = $first_record->ds_changed;
      }
      else {
        $result_set['recent_change'] = NULL;
      }
      $model_facet = $nids->getFacetSet()->getFacet('model');
      foreach ($model_facet as $value => $mod_count) {
        if (!in_array($value, $models)) {
          $models[] = $value;
        }
      }
    }
    $result_set['item_count'] = $count;
    $model_count = count($models);
    $result_set['model_count'] = $model_count;
  }
  else {
    $result_set['recent_change'] = NULL;
  }
  return $result_set;
}

/**
 * Query Solr for item's field_combined_member_of field.
 *
 * @param mixed $item_node
 *   Can take a node object or the node ID value.
 *
 * @return array
 *   Multidimensional array that contains the nid, changed, and
 *   original_file_count for each child of the collection. The key of the top
 *   array is the nid. This array should be sorted by the changed timestamps
 *   so that the first element's changed value would be the most recent.
 */
function asu_collection_extras_solr_get_node_membership($item_node) {
  $item_node_id = (is_object($item_node) ? $item_node->id() : $item_node);
  $nids_arr = [];
  if (!is_null($item_node)) {
    $index = Index::load('default_solr_index');
    $server = $index->getServerInstance();
    $backend = $server->getBackend();
    $solrConnector = $backend->getSolrConnector();
    $solariumQuery = $solrConnector->getSelectQuery();
    $count = 0;
    while (TRUE) {
      $solariumQuery->setStart($count)->setRows(50000);
      $solariumQuery->addParam('q', '(its_nid:' . $item_node_id . ')');
      $solariumQuery->setFields(['its_nid', 'itm_field_combined_member_of', 'itm_field_ancestors', 'its_field_model']);
      $nids = $solrConnector->execute($solariumQuery);
      foreach ($nids as $nid_doc) {
        $nids_arr[$nid_doc->its_nid] = (array) $nid_doc;
      }
      $count = $count + $nids->count();
      if ($nids->getNumFound() <= $count) {
        break;
      }
    }

  }
  return $nids_arr;
}
