<?php

/**
 * @file
 * Default fields hooks.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\File\FileSystemInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\file\Plugin\Field\FieldType\FileFieldItemList;
use Drupal\media\MediaInterface;
use Drupal\node\NodeInterface;
use Drupal\paragraphs\Entity\Paragraph;
use GuzzleHttp\Exception\RequestException;

/**
 * Make a media's files private/public if necessary.
 */
function asu_default_fields_update_file_schema(EntityInterface $entity) {
  // Check for access by Anonymous User (uid 0).
  $accessible = $entity->access('view', \Drupal::entityTypeManager()->getStorage('user')->load(0));

  // Load the necessary services.
  $fileSystemService = \Drupal::service('file_system');
  $stream_wrapper_manager = \Drupal::service('stream_wrapper_manager');
  $file_repository_service = \Drupal::service('file.repository');

  foreach ($entity->getFields(FALSE) as $field) {
    if ($field instanceof FileFieldItemList) {
      foreach ($field->referencedEntities() as $file) {

        // Skip files outside public and private.
        // Probably no longer necessary since we dropped fedora's flysystem,
        // but we'll keep it for safety's sake.
        $uriScheme = $stream_wrapper_manager->getScheme($file->getFileUri());
        if (!in_array($uriScheme, ['public', 'private'])) {
          continue;
        }

        // Skip files larger than 5 GB.
        // @see https://www.drupal.org/project/s3fs/issues/3204634
        if ($file->getSize() >= 5368709120) {
          \Drupal::logger('asu_default_fields')->warning("Cannot move large file '@uri' to s3 for Media '@label'", [
            '@uri' => $file->getFileUri(),
            '@label' => $entity->label(),
          ]);
          continue;
        }

        // Skip PDFs. They need to stay in private
        // due to CORS issues with pdf.js.
        if ($file->getMimeType() == 'application/pdf') {
          \Drupal::logger('asu_default_fields')->warning("PDF '@uri' for Media '@label' must stay in the private filesystem.", [
            '@uri' => $file->getFileUri(),
            '@label' => $entity->label(),
          ]);
          continue;
        }

        // It should not be both public AND restricted.
        $fileIsPublic = $uriScheme === 'public';
        if ($fileIsPublic !== $accessible) {
          // Move it.
          $newUriPath = $stream_wrapper_manager->getTarget($file->getFileUri());
          $newUriScheme = $accessible ? 'public' : 'private';
          $fileTargetUri = "$newUriScheme://$newUriPath";
          $target_dir = dirname($fileTargetUri);
          try {
            $fileSystemService->prepareDirectory($target_dir, FileSystemInterface::CREATE_DIRECTORY);
            $movedFile = $file_repository_service->move($file, $fileTargetUri, FileSystemInterface::EXISTS_RENAME);
            if (!$movedFile) {
              \Drupal::logger('asu_default_fields')->warning("Failed to move file: '@uri'", ['@uri' => $file->getFileUri()]);
            }
            else {
              \Drupal::logger('asu_default_fields')->notice("Moved file '@uri' to '@new_uri' for Media '@label'", [
                '@uri' => $file->getFileUri(),
                '@new_uri' => $fileTargetUri,
                '@label' => $entity->label(),
              ]);
            }
          }
          catch (FileException $e) {
            // Only write out the first line of the exception,
            // which is usually good enough, so we don't have
            // to deal with commenting out each line.
            $this->output->writeln("# Failed to copy file {$file->getFileUri()}: " . rtrim(strtok($e->getMessage(), PHP_EOL)));
          }
        }
      }
    }
  }
}

/**
 * Implements hook_media_presave().
 */
function asu_default_fields_media_presave(MediaInterface $media) {
  $utils = \Drupal::service('islandora.utils');
  if ($media->hasField('field_media_of') && count($media->get('field_media_of')) > 0) {
    if ($media->get('field_media_use') && $media->get('field_media_use')->entity) {
      $taxy = $media->get('field_media_use')->entity;
      // @todo add a config for which "uses" to assign this value from,
      // possible that multiple uses would assign multiple resource types here.
      if ($taxy->getName() == "Original File") {
        $node = $utils->getParentNode($media);
        // Note this only applies up the free one -
        // complex objects may require reworking here.
        $mime = $media->get('field_mime_type')->value;
        if ($node && !empty($mime)) {
          $mime = str_replace('/', '_', $mime);
          $mime = str_replace('.', '_', $mime);
          $res_type = \Drupal::config('asu_default_fields.mimesettings')->get($mime);
          // @todo add the ability to push the resource type to a
          // complex object parent would correlate with a view of
          // objects that do not have resource types set but that
          // view would also filter out children of complex objects
          // because as long as the parent complex object has
          // at least 1 resource type, its ok.
          $node->set('field_resource_type', ['target_id' => $res_type]);
          $node->save();
        }
      }
    }
  }
}

/**
 * Implements hook_node_presave().
 */
function asu_default_fields_node_presave(NodeInterface $node) {
  if ($node->bundle() == "collection" || $node->bundle() == "asu_repository_item") {
    if ($node->hasField('field_title')) {
      $pgs = $node->field_title->getValue();
      if ($pgs) {
        $pg1 = $pgs[0];
        $item = Paragraph::load($pg1['target_id']);
        $nonsort = $item->field_nonsort->value;
        $main = $item->field_main_title->value;
        $sub = $item->field_subtitle->value;
        $nm = ($nonsort != NULL || $nonsort != "" || $nonsort != " " ? trim($nonsort) . " " : "") .
          ($main != NULL ? trim($main) : "[untitled]") .
          ($sub != NULL ? ": " . trim($sub) : "");
        $nm = substr(trim($nm), 0, 254);
        $node->setTitle($nm);
      }
      else {
        $node->setTitle('[untitled]');
      }
    }
  }
}

/**
 * Implements hook_node_form_alter().
 */
function asu_default_fields_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'node_asu_repository_item_form') {
    $node = $form_state->getFormObject()->getEntity();
    if ($node->isNew()) {
      $query = \Drupal::request()->getQueryString();
      if (!empty($query_string)) {
        parse_str($query_string, $query);
      }

      $qps = explode('&', $query);
      foreach ($qps as $qp) {
        $parts = explode('=', $qp);
        if ($parts[0] == 'edit%5Bfield_member_of%5D%5Bwidget%5D%5B0%5D%5Btarget_id%5D') {
          $nid = $parts[1];
        }
      }

      if (isset($nid)) {
        $parent = \Drupal::entityTypeManager()->getStorage('node')->load($nid);
        if ($parent->hasField('field_default_original_file_perm') && $parent->get('field_default_original_file_perm')->entity != NULL && $node->get('field_default_original_file_perm')->isEmpty()) {
          $of_default_perms = $parent->get('field_default_original_file_perm')->entity;
          $form['field_default_original_file_perm']['widget'][0]['target_id']['#default_value'] = $of_default_perms;
        }
        if ($parent->hasField('field_default_derivative_file_pe') && $parent->get('field_default_derivative_file_pe')->entity != NULL && $node->get('field_default_derivative_file_pe')->isEmpty()) {
          $deriv_default_perms = $parent->get('field_default_derivative_file_pe')->entity;
          $form['field_default_derivative_file_pe']['widget'][0]['target_id']['#default_value'] = $deriv_default_perms;
        }
      }
    }
  }
  elseif ($form_id == 'media_image_add_form' || $form_id == 'media_audio_add_form' || $form_id == 'media_document_add_form' || $form_id == 'media_file_add_form' || $form_id == 'media_video_add_form') {
    $media = $form_state->getFormObject()->getEntity();
    if ($media->isNew()) {
      $query = \Drupal::request()->getQueryString();
      if (!empty($query_string)) {
        parse_str($query_string, $query);
      }

      $qps = explode('&', $query);
      foreach ($qps as $qp) {
        $parts = explode('=', $qp);
        if ($parts[0] == 'edit%5Bfield_media_of%5D%5Bwidget%5D%5B0%5D%5Btarget_id%5D') {
          $nid = $parts[1];
        }
      }
      if (isset($nid)) {
        // In the media create form, we inherit the default for the
        // original file only, because we assume that most manual
        // additions of files are for original files.
        $parent = \Drupal::entityTypeManager()->getStorage('node')->load($nid);
        if ($parent->hasField('field_default_original_file_perm') && !$parent->get('field_default_original_file_perm')->isEmpty() && $media->get('field_access_terms')->isEmpty()) {
          $of_default_perms = $parent->get('field_default_original_file_perm')->entity;
          $form['field_access_terms']['widget']['#default_value'] = [$of_default_perms->id()];
        }
      }
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function asu_default_fields_node_insert(NodeInterface $node) {
  if ($node->hasField('field_member_of') && $node->get('field_member_of') != NULL) {
    $parent = $node->get('field_member_of')->entity;
    if ($parent) {
      $save = FALSE;
      if ($parent->hasField('field_default_original_file_perm') && $parent->get('field_default_original_file_perm')->entity != NULL && $node->get('field_default_original_file_perm')->isEmpty()) {
        $of_default_perms = $parent->get('field_default_original_file_perm')->entity->id();
        $node->set('field_default_original_file_perm', $of_default_perms);
        $save = TRUE;
      }
      if ($parent->hasField('field_default_derivative_file_pe') && !$parent->get('field_default_derivative_file_pe')->isEmpty() && $node->get('field_default_derivative_file_pe')->isEmpty()) {
        $deriv_default_perms = $parent->get('field_default_derivative_file_pe')->entity->id();
        $node->set('field_default_derivative_file_pe', $deriv_default_perms);
        $save = TRUE;
      }
      if ($parent->bundle() == 'collection' && $parent->hasField('field_oai_set') && !$parent->get('field_oai_set')->isEmpty()) {
        $oai_set = $parent->get('field_oai_set')->entity->id();
        $node->set('field_oai_set', $oai_set);
        $save = TRUE;
      }
      if ($parent->bundle() == "asu_repository_item") {
        $node->set('field_complex_object_child', 1);
        $save = TRUE;
      }
      if ($save) {
        $node->save();
      }
    }
  }
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('hdl')) {
    if ($node->bundle() == "asu_repository_item" || $node->bundle() == "collection") {
      $entity_type = $node->getEntityTypeId();

      if (!$entity_type == 'node') {
        return;
      }

      $handle_field = \Drupal::config('persistent_identifiers.settings')->get('persistent_identifiers_target_field');
      if ($node->hasField($handle_field) && $node->get($handle_field)->isEmpty()) {
        // Only run the minter if the field handle is empty.
        $config = \Drupal::config('persistent_identifiers.settings');
        $content_type = $node->bundle();
        $allowed_types = $config->get('persistent_identifiers_bundles');
        $config = \Drupal::configFactory()->getEditable('asu_default_fields.settings');
        if ($node->getEntityTypeId() == 'node' && in_array($content_type, $allowed_types, TRUE) &&
          !($config->get('disable_handle_generation'))) {
          if ($node->bundle() == "collection") {
            asu_default_fields_mint_handle($node, 'R.2.C');
          }
          else {
            asu_default_fields_mint_handle($node);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_media_insert().
 */
function asu_default_fields_media_insert(MediaInterface $media) {
  $islandora_utils = \Drupal::service('islandora.utils');
  $parent = $islandora_utils->getParentNode($media);
  if ($parent) {
    if ($media->get('field_media_use') && $media->get('field_media_use')->entity) {
      $taxy = $media->get('field_media_use')->entity;
      if ($taxy->getName() == "Original File") {
        if ($parent->hasField('field_default_original_file_perm') && !$parent->get('field_default_original_file_perm')->isEmpty() && $media->get('field_access_terms')->isEmpty()) {
          $of_default_perms = $parent->get('field_default_original_file_perm')->entity->id();
          $media->set('field_access_terms', $of_default_perms);
          $media->save();
        }
        // Media don't have handles.
      }
      elseif ($taxy->getName() == 'Service File') {
        if ($parent->hasField('field_default_derivative_file_pe') && !$parent->get('field_default_derivative_file_pe')->isEmpty() && $media->get('field_access_terms')->isEmpty()) {
          $deriv_default_perms = $parent->get('field_default_derivative_file_pe')->entity->id();
          $media->set('field_access_terms', $deriv_default_perms);
          $media->save();
        }
      }
    }
  }
  asu_default_fields_update_file_schema($media);
}

/**
 * Implements hook_media_update().
 */
function asu_default_fields_media_update(EntityInterface $media) {
  asu_default_fields_update_file_schema($media);
}

/**
 * A helper function to call the handle minting service.
 */
function asu_default_fields_mint_handle(EntityInterface $object, string $prefix = NULL) {
  $config = \Drupal::config('persistent_identifiers.settings');
  $minter = \Drupal::service($config->get('persistent_identifiers_minter'));
  try {
    if ($prefix) {
      $extras = ['hdl_qualifier' => $prefix];
      $pid = $minter->mint($object, $extras);
    }
    else {
      $pid = $minter->mint($object, NULL);
    }
  }
  catch (RequestException $e) {
    \Drupal::logger('persistent_identifiers')->warning("Handle server was inaccessible while minting handle for node %nid", [
      '%nid' => $object->id(),
    ]);
    return;
  }
  if (is_null($pid)) {
    \Drupal::logger('persistent_identifiers')->warning("Persistent identifier not created for node @nid.", [
      '@nid' => $object->id(),
    ]);
    return;
  }
  $persister = \Drupal::service($config->get('persistent_identifiers_persister'));
  if ($persister->persist($object, $pid)) {
    \Drupal::logger('persistent_identifiers')->info("Persistent identifier %pid created for node @nid.", [
      '%pid' => $pid,
      '@nid' => $object->id(),
    ]);
  }
  else {
    \Drupal::logger('persistent_identifiers')->warning("Persistent identifier not created for node @nid.", [
      '@nid' => $object->id(),
    ]);
  }
}
