<?php

/**
 * @file
 * Contains asu_permissions.module.
 */

use Drupal\asu_permissions\Exception\LibauthException;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityStorageException;
use Drupal\Core\Session\AccountInterface;
use Drupal\group\Entity\Group;
use Drupal\node\NodeInterface;
use Drupal\user\UserInterface;
use GuzzleHttp\Exception\ClientException;
use GuzzleHttp\Exception\ConnectException;

/**
 * Implements hook_node_insert().
 *
 * Alternatively could trigger this with a context reaction.
 */
function asu_permissions_node_insert(NodeInterface $node) {
  if ($node->bundle() == "collection") {
    // Create a new group for the collection.
    $pluginId = 'group_node:' . $node->bundle();
    $col_group = Group::create([
      'type' => 'collection_group',
      'label' => 'Collection ' . $node->id() . ' Group',
    ]);
    $col_group->save();
    $col_group->addRelationship($node, $pluginId);
    $col_group->save();
  }
  elseif ($node->bundle() == 'asu_repository_item') {
    // Add the asu_repository_item to the parent collection's group.
    // We are assumming here one member_of relationship.
    $parent = _get_collection_parent($node);
    if ($parent) {
      $pluginId = 'group_node:' . $node->bundle();
      $group_contents = _get_group($parent);
      if (!empty($group_contents)) {
        foreach ($group_contents as $group_content) {
          /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
          $group = $group_content->getGroup();
          $group->addRelationship($node, $pluginId);
        }
      }
    }
  }
}

/**
 * Gets the collection parent of an entity.
 */
function _get_collection_parent($entity) {
  $parent = $entity->field_member_of->entity;
  if ($parent) {
    if ($parent->bundle() != "collection") {
      $parent = _get_collection_parent($parent);
    }
    return $parent;
  }
}

/**
 * Gets the groups that an entity belongs to.
 */
function _get_group($entity) {
  $group_contents = \Drupal::entityTypeManager()
    ->getStorage('group_content')
    ->loadByEntity($entity);
  return $group_contents;
}

/**
 * Removes an entity from a collection group.
 */
function _remove_object_from_parent_group($entity, $parent) {
  $group_contents = _get_group($entity);
  if (empty($group_contents)) {
    return;
  }
  foreach ($group_contents as $group_content) {
    /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
    $group = $group_content->getGroup();
    if ($group->label() == 'Collection ' . $parent->id() . ' Group') {
      $group_content->delete();
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function asu_permissions_node_delete(NodeInterface $node) {
  if ($node->bundle() == "collection") {
    // Delete the collection group.
    $group_contents = _get_group($node);
    if (empty($group_contents)) {
      return;
    }
    foreach ($group_contents as $group_content) {
      /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
      $group = $group_content->getGroup();
      $group->delete();
    }
  }
  elseif ($node->bundle() == 'asu_repository_item') {
    $parent = _get_collection_parent($node);
    if ($parent) {
      _remove_object_from_parent_group($node, $parent);
    }
  }
}

/**
 * Add object to group.
 */
function _add_object_to_parent_group($node) {
  $pluginId = 'group_node:' . $node->bundle();
  $group_contents = _get_group($node->get('field_member_of')->entity);

  // Check if the node is already in the group.
  $node_group_contents = _get_group($node);
  if (!empty($node_group_contents)) {
    foreach ($node_group_contents as $gc) {
      $group = $gc->getGroup();
      if ($group->label() == 'Collection ' . $node->get('field_member_of')->entity->id() . ' Group') {
        return;
      }
    }
  }

  if (!empty($group_contents)) {
    foreach ($group_contents as $group_content) {
      /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
      $group = $group_content->getGroup();
      $group->addRelationship($node, $pluginId);
    }
  }
}

/**
 * Implements hook_node_update().
 */
function asu_permissions_node_update(NodeInterface $node) {
  if ($node != NULL && $node->bundle() == 'asu_repository_item') {
    $utils = \Drupal::service('islandora.utils');
    if (!$utils->haveFieldsChanged($node, $node->original)) {
      return;
    }
    if ($node->get('field_member_of')->entity && $node->original->get('field_member_of')->entity) {
      if ($node->get('field_member_of')->entity->id() != $node->original->get('field_member_of')->entity->id()) {
        _remove_object_from_parent_group($node, $node->original->get('field_member_of')->entity);
        _add_object_to_parent_group($node);
      }
    }
    elseif (!$node->get('field_member_of')->entity && $node->original->get('field_member_of')->entity) {
      _remove_object_from_parent_group($node, $node->original->get('field_member_of')->entity);
    }
    elseif ($node->get('field_member_of')->entity && !$node->original->get('field_member_of')->entity) {
      _add_object_to_parent_group($node);
    }

    $of_items = $node
      ->get('field_default_original_file_perm')
      ->filterEmptyItems();
    $of_original_items = $node->original
      ->get('field_default_original_file_perm')
      ->filterEmptyItems();

    // If the field items are not equal, we need to save.
    if (!$of_items->equals($of_original_items)) {
      // Change the media with type OF.
      $medias = $utils->getMedia($node);
      foreach ($medias as $media) {
        $term = $media->get('field_media_use')->entity;
        $term_name = $term->getName();
        if ($term_name == "Original File") {
          $media->set('field_access_terms', $node->field_default_original_file_perm->getValue());
          $media->save();
        }
      }
    }

    $df_items = $node
      ->get('field_default_derivative_file_pe')
      ->filterEmptyItems();
    $df_original_items = $node->original
      ->get('field_default_derivative_file_pe')
      ->filterEmptyItems();

    // If the field items are not equal, we need to save.
    if (!$df_items->equals($df_original_items)) {
      // Change the media with service file.
      if (!isset($medias)) {
        $medias = $utils->getMedia($node);
      }
      foreach ($medias as $media) {
        $term = $media->get('field_media_use')->entity;
        $term_name = $term->getName();
        if ($term_name == "Service File") {
          $media->set('field_access_terms', $node->field_default_derivative_file_pe->getValue());
          $media->save();
        }
      }
    }
  }
}

/**
 * Implements hook_node_access().
 */
function asu_permissions_node_access(NodeInterface $node, $op, AccountInterface $account) {
  if ($node->bundle() == "collection" || $node->bundle() == "asu_repository_item") {
    if ($account->isAuthenticated() && (in_array("administrator", $account->getRoles()) || in_array("metadata_manager", $account->getRoles()))) {
      // Allow if admin or metadata manager.
      return AccessResult::allowed();
    }
    // If the node is published and there is parent access,
    // don't bother checking the groups.
    if ($node->isPublished()) {
      $access_result = AccessResult::allowed();
      $parents = _walk_membership($node, []);
      if (count($parents) > 0) {
        foreach ($parents as $par) {
          if ($par->uuid() != $node->uuid()) {
            // This line enforces if you can't view a parent
            // then you can't view child.
            $taccess = $par->access($op, $account);
            if ($taccess == FALSE) {
              $access_result = AccessResult::forbidden();
              break;
            }
            if ($par->hasField('field_enabled') && $par->get('field_enabled') && $par->get('field_enabled')->value == 0) {
              $access_result = AccessResult::forbidden();
              break;
            }
          }
        }
      }
    }
    else {
      // If its not published then we should check the group membership.
      $access_result = AccessResult::forbidden();
    }
    if (isset($access_result) && $access_result == AccessResult::forbidden()) {
      $groups = [];
      $grp_membership_service = \Drupal::service('group.membership_loader');
      $grps = $grp_membership_service->loadByUser($account);
      foreach ($grps as $grp) {
        $groups[] = $grp->getGroup()->id();
      }
      if (count($groups) > 0) {
        $node_groups = _get_groups_from_node($node);
        $plugin_id = 'group_node:' . $node->bundle();
        foreach ($node_groups as $group) {
          if ($group->hasPermission("view unpublished $plugin_id entity", $account) && $group->getMember($account)) {
            // This is what gives metadata managers and admins their power.
            $access_result = AccessResult::allowed();
          }
          else {
            // Forbid if not explictly allowed by group. This is powerful.
            $access_result = AccessResult::forbidden();
          }
        }
      }
    }
  }
  if (isset($access_result)) {
    $access_result->addCacheableDependency($node);
    $access_result->addCacheableDependency($op);
    $access_result->addCacheContexts(['theme']);
    return $access_result;
  }
  else {
    return AccessResult::neutral();
  }
}

/**
 * Implements hook_media_access().
 *
 * Which is also hook_entity_type_access().
 */
function asu_permissions_media_access(EntityInterface $entity, $operation, AccountInterface $account) {
  // Allow if admin.
  // @todo potentially do a lookup here for additional all-seeing roles.
  if ($account->isAuthenticated() && (in_array("administrator", $account->getRoles()) || in_array("metadata_manager", $account->getRoles()))) {
    $access_result = AccessResult::allowed();
    $access_result->addCacheableDependency($entity);
    $access_result->addCacheableDependency($account);
    return $access_result;
  }

  // Check Media Access Terms.
  if ($entity->hasField('field_access_terms') && $entity->get('field_access_terms')->entity) {
    $access_term = $entity->get('field_access_terms')->entity->getName();
    if ($access_term == 'Public') {
      return AccessResult::allowed();
    }

    // Anon are only allowed 'Public' when the terms field is populated.
    if (!$account->isAuthenticated() && $access_term != "Public") {
      $access_result = AccessResult::forbidden();
      $access_result->addCacheableDependency($entity);
      $access_result->addCacheableDependency($account);
      return $access_result;
    }
  }

  // Since the Media doesn't appear to care, we check related nodes.
  // Get a node from the Islandora Media→Node or Standard Drupal Node→Media models.
  if (($item = $entity->get('field_media_of')->entity) or ($item = current(\Drupal::entityTypeManager()->getStorage('node')->loadByProperties(['field_work_products' => $entity->id()])))) {
    // Default to what the parent access is.
    $taccess = $item->access($operation, $account);
    // Check embargos set by parent objects.
    // We have to walk parents to support complex objects.
    $date = new \DateTime();
    $today = $date->format("c");
    $all_parents = _walk_membership($item, [$item]);
    foreach ($all_parents as $par) {
      if ($par->hasField('field_embargo_release_date') && $par->get('field_embargo_release_date') && $par->get('field_embargo_release_date')->value != "T23:59:59" && $par->get('field_embargo_release_date')->value >= $today) {
        $taccess = FALSE;
        break;
      }
    }
    // If no parent or embargo blocks; check Groups permissions for Private.
    if ($taccess && $access_term == "Private") {
      // No access to Private by default, but allow if Group permits.
      $access_result = AccessResult::forbidden();
      $groups = _get_groups_from_node($item);
      foreach ($groups as $g) {
        if ($g->getMember($account)) {
          $access_result = AccessResult::allowed();
          break;
        }
      }
    }
    else {
      $access_result = AccessResult::forbidden();
    }
    // Since parent permissions can change, add it as a cache dependency.
    $access_result->addCacheableDependency($item);
  }

  if (isset($access_result)) {
    $access_result->addCacheableDependency($entity);
    $access_result->addCacheableDependency($account);
    $access_result->addCacheContexts(['theme']);
    return $access_result;
  }
  // Media doesn't care and there are no parent items to govern access:
  else {
    return AccessResult::neutral();
  }

}

/**
 * Follows chain of field_member_of links.
 */
function _walk_membership(NodeInterface $entity, $parents) {
  $enarr = [];
  $enarr[] = $entity;

  // Find the next in the chain, if there are any.
  if ($entity->hasField('field_member_of') &&
    !$entity->get('field_member_of')->isEmpty() && $entity->get('field_member_of') != NULL && $entity->get('field_member_of')->referencedEntities() != NULL) {
    $newent = $entity->get('field_member_of')->referencedEntities()[0];
    if (!array_key_exists($newent->id(), $parents)) {
      $parents[$newent->id()] = $newent;
    }
    $new_pars = _walk_membership($newent, $parents);
  }
  if (isset($new_pars)) {
    return array_merge_recursive_unique($parents, $new_pars);
  }
  else {
    $newarr = array_merge_recursive_unique($parents, $enarr);
    return $newarr;
  }
}

/**
 * Walks nested array (second param) to merge full tree into the first.
 */
function array_merge_recursive_unique($array1, $array2) {
  // Optimize the base case.
  if (empty($array1)) {
    return $array2;
  }

  foreach ($array2 as $key => $value) {
    if (is_array($value) && is_array(@$array1[$key])) {
      $value = array_merge_recursive_unique($array1[$key], $value);
    }
    $array1[$key] = $value;
  }
  return $array1;
}

/**
 * Implements hook_file_download().
 */
function asu_permissions_file_download($uri) {
  /** @var \Drupal\file\FileInterface[] $files */
  $files = \Drupal::entityTypeManager()
    ->getStorage('file')
    ->loadByProperties(['uri' => $uri]);
  $utils = \Drupal::service('islandora.utils');
  $user = \Drupal::currentUser();
  $uroles = $user->getRoles();
  foreach ($files as $f) {
    if (in_array('administrator', $uroles) || in_array('metadata_manager', $uroles)) {
      // \Drupal::logger('asu permissions')->info("let admin in");
      return 1;
    }
    $medias = $utils->getReferencingMedia($f->id());
    if (count($medias) == 0) {
      return NULL;
    }
    foreach ($medias as $media) {
      $node = $utils->getParentNode($media);
      if (!$media->access('view', $user)) {
        // If the user isn't allowed to view the media, disable cache and
        // return -1 to tell Drupal to block access to the requested file.
        \Drupal::service('page_cache_kill_switch')->trigger();
        return -1;
      }
      if ($node) {
        $node = $media->get('field_media_of')->entity;
        $date = new \DateTime();
        $today = $date->format("c");
        if (
          $node && $node->hasField('field_embargo_release_date') && $node->get('field_embargo_release_date') && $node->get('field_embargo_release_date')->value != "T23:59:59" && $node->get('field_embargo_release_date')->value >= $today
        ) {
          \Drupal::service('page_cache_kill_switch')->trigger();
          return -1;
        }
      }
    }
  }
}

/**
 * Get the groups for a node.
 */
function _get_groups_from_node(EntityInterface $node) {
  // Load all of the group content for this node.
  $group_contents = \Drupal::entityTypeManager()
    ->getStorage('group_content')
    ->loadByEntity($node);

  /** @var \Drupal\group\Entity\GroupInterface[] $groups */
  $groups = [];
  foreach ($group_contents as $group_content) {
    /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
    $group = $group_content->getGroup();
    $groups[$group->id()] = $group;
  }
  return $groups;
}

/**
 * Implements hook_entity_type_insert().
 */
function asu_permissions_user_insert(UserInterface $entity) {
  $url = "http://authprod.lib.asu.edu/asurite/" . $entity->getDisplayName() . ".json";
  $client = \Drupal::httpClient();
  // If they aren't going to be a casuser,
  // then we can just proceed without this check.
  if (!(in_array('casuser', $entity->getRoles()))) {
    return;
  }
  try {
    // Try checking if they are in the headcount in authprod/libauth.
    $request = $client->request('GET', $url);
    if ($request->getStatusCode() == 200) {
      // If 200 and in headcount, proceed.
      $json = json_decode($request->getBody(), TRUE);
      if (array_key_exists('in_headcount', $json) && $json['in_headcount'] == TRUE) {
        if (array_key_exists('preferred_first_name', $json['person'])) {
          $fname = $json['person']['preferred_first_name'] != '' ? $json['person']['preferred_first_name'] : $json['person']['first_name'];
        }
        else {
          $fname = $json['person']['first_name'];
        }
        if (array_key_exists('preferred_last_name', $json['person'])) {
          $lname = $json['person']['preferred_last_name'] != '' ? $json['person']['preferred_last_name'] : $json['person']['last_name'];
        }
        else {
          $lname = $json['person']['last_name'];
        }
        $honors = $json['honors'];
        $emplid = $json['person']['emplid'];
        $schools = [];
        $entity->set('field_first_name', $fname);
        $entity->set('field_last_name', $lname);
        $entity->set('field_honors', $honors);
        $entity->set('field_emplid', $emplid);
        $campus = '';
        if ($honors) {
          $entity->addRole('honors_student');
          foreach ($json['stuplan'] as $plan) {
            if (!in_array($plan['acad_dept_org_descr'], $schools)) {
              array_push($schools, $plan['acad_dept_org_descr']);
            }
            if ($plan['acad_career'] == 'UGRD') {
              $campus = $plan['campus'];
            }
          }
        }
        $entity->set('field_programs', $schools);
        if (!$campus) {
          $campus = $json['stuplan'][0]['campus'];
        }
        $entity->set('field_campus', $campus);
        $entity->save();
      }
      else {
        throw new LibauthException('Libauth: User is not authorized for electronic resources at ASU. If you think this is an error, <a href="/contact">please contact us</a>.');
      }
    }
    elseif ($request->getStatusCode() == 404) {
      // If 404 exit without creating user.
      throw new LibauthException('Libauth: Unable to find user ' . $entity->getDisplayName() . ' at ASU. If you think this is an error, <a href="/contact">please contact us</a>.');

    }
    else {
      throw new LibauthException('Libauth: There was an issue validating user ' . $entity->getDisplayName() . ' at ASU due to a non-standard status code (not 200 or 404. If you think this is an error, <a href="/contact">please contact us</a>.');
      // If anything else exit without creating user.
    }
  }
  catch (EntityStorageException $e) {
    throw new LibauthException('Libauth: User is not authorized for electronic resources at ASU. If you think this is an error, <a href="/contact">please contact us</a>.');
  }
  catch (ClientException $e) {
    if ($request && $request->getStatusCode() == 404) {
      throw new LibauthException('Libauth: Unable to find user ' . $entity->getDisplayName() . ' at ASU. If you think this is an error, <a href="/contact">please contact us</a>.');

    }
    else {
      throw new LibauthException('Libauth: There was an issue validating user ' . $entity->getDisplayName() . ' at ASU due to a client exception. If you think this is an error, <a href="/contact">please contact us</a>.');
    }
  }
  catch (ConnectException $e) {
    throw new LibauthException('Libauth: There was an issue validating user ' . $entity->getDisplayName() . ' at ASU due to a connection exception. If you think this is an error, <a href="/contact">please contact us</a>.');
  }
}

/**
 * Implements hook_theme().
 */
function asu_permissions_theme() {
  return [
    'exception_template' => [
      'template' => 'custom-exception',
      'variables' => [
        'message' => NULL,
      ],
    ],
  ];
}
