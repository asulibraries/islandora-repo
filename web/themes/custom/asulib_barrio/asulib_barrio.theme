<?php

/**
 * @file
 */

use Drupal\node\NodeInterface;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\Core\Link;

/**
 * @file
 * Functions to support theming in the SASS Starterkit subtheme.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_system_theme_settings_alter() for settings form.
 *
 * Replace Barrio setting options with subtheme ones.
 */
function asulib_barrio_form_system_theme_settings_alter(&$form, FormStateInterface $form_state) {
  $form['components']['navbar']['bootstrap_barrio_navbar_top_background']['#options'] = [
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  ];
  $form['components']['navbar']['bootstrap_barrio_navbar_background']['#options'] = [
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  ];
}

/**
 *
 */
function asulib_barrio_preprocess_breadcrumb(&$variables) {
  if ($variables['breadcrumb']) {
    // Add the node title to breadcrumbs as plain text.
    $node = \Drupal::routeMatch()->getParameter('node');
    $current_route = \Drupal::service('current_route_match')->getRouteName();
    $search_param_name = ($current_route == 'repo_bento_search.search_page') ?
      'q' : 'search_api_fulltext';
    $search_term = \Drupal::request()->query->get($search_param_name);
    if ($node) {
      $request = \Drupal::request();
      $route_match = \Drupal::routeMatch();
      $page_title = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());
      if ($current_route == 'view.solr_search_content.page_2') {
        $variables['breadcrumb'][] = [
          'text' => ($search_term) ? 'Search for "' . $search_term . '"' : 'Explore media',
          'attributes' => new Attribute(['class' => ['is_active']]),
        ];
      }
      elseif (!empty($page_title)) {
        $variables['breadcrumb'][] = [
          'text' => $page_title,
          'attributes' => new Attribute(['class' => ['is_active']]),
        ];
      }
    }
    elseif ($current_route == 'asu_item_extras.complex_object_members') {
      $variables['breadcrumb'][] = [
        'text' => t('Associated media'),
        'attributes' => new Attribute(['class' => ['is_active']]),
      ];
    }
    else {
      // Add the search text as a text-breadcrumb as text.
      if ($search_term && $search_term != "") {
        $variables['breadcrumb'][] = [
          'text' => 'Search for "' . $search_term . '"',
          'attributes' => new Attribute(['class' => ['is_active']]),
        ];
      }
      elseif ($current_route == "view.solr_search_content.page_1" || $current_route == "view.solr_search_content.page_3") {
        $variables['breadcrumb'][] = [
          'text' => 'Search',
          'attributes' => new Attribute(['class' => ['is_active']]),
        ];
      }
      elseif ($current_route == "view.collections.page_1") {
        $route_match = \Drupal::routeMatch();
        $last_bread = array_pop($variables['breadcrumb']);
        $letter = $route_match->getParameter('arg_0');
        if ($letter) {
          $last_bread['text'] = strtoupper($letter);
          $last_bread['url'] = $last_bread['url'] . "/" . $letter;
          $variables['breadcrumb'][] = $last_bread;
        }
      }
    }
  }
  $variables['#cache']['contexts'][] = 'url';
}

/**
 * Implements hook_preprocess_region()
 */
function asulib_barrio_preprocess_region(&$variables) {
  if ($variables['region'] == 'sidebar_first') {
    if (array_key_exists('HTTP_REFERER', $_SERVER)) {
      $referer_url = $_SERVER['HTTP_REFERER'];
      $this_server = $_SERVER['SERVER_NAME'];
      // If this referer_url contains "/search" make a link back to that...
      $current_route = \Drupal::routeMatch()->getRouteName();
      $node = \Drupal::routeMatch()->getParameter('node');
      if (
        $current_route == 'entity.node.canonical' && $referer_url && strstr($referer_url, "/search") &&
        strstr($referer_url, $this_server)
      ) {
        $variables['backtosearch'] = $referer_url;
      }
      if ($current_route == 'asu_item_extras.full_metadata_view' && $node instanceof NodeInterface) {
        $variables['backtoitem'] = Url::fromRoute('entity.node.canonical', ['node' => $node->id()]);
      }
    }
  }
}

/**
 * Implements hook_preprocess_node()
 * Builds OAI link out of site URL elements
 */
function asulib_barrio_preprocess_node(&$variables) {
  if (array_key_exists('node', $variables)) {
    $node = $variables['node'];
  }
  if (!is_object($node) && is_string($node)) {
    $node = \Drupal::entityTypeManager()->getStorage('node')->load($node);
  }
  if ($node && $node->getType() == 'asu_repository_item') {
    if ($variables['view_mode'] == 'full' || $variables['view_mode'] == 'asu_audio' || $variables['view_mode'] == 'asu_complex_object' || $variables['view_mode'] == 'asu_document' || $variables['view_mode'] == 'asu_image' || $variables['view_mode'] == 'asu_video' || $variables['view_mode'] == 'full_metadata') {
      $site_url = \Drupal::urlGenerator()->generateFromRoute('<front>', [], ['absolute' => TRUE]);
      $url_parts = explode('/', $site_url, -1);
      $domain = $url_parts[2];
      $variables['oai_base_url'] = $site_url . 'oai/request?verb=GetRecord&metadataPrefix=oai_dc&identifier=oai:' . $domain . ':node-';
    }
    $node_language = $node->get('field_language')->entity;
    $variables['hreflang_attr'] = '';
    if ($node_language) {
      if ($node_language->hasField('field_langcode_2digits') && $node_language->get('field_langcode_2digits')->value) {
        $variables['hreflang_attr'] = $node_language->get('field_langcode_2digits')->value;
      }
    }
    if ($variables['view_mode'] == 'complex_object_child_box') {
      // Since we are pulling the $node var from the route, we're actually already on the parent obj page.
      $parent_obj = \Drupal::request()->attributes->get('node');
      if ($parent_obj) {
        $collection = $parent_obj->get('field_member_of')->entity;
        if ($collection && $collection->bundle() == 'collection') {
          $fields_to_display = $collection->get('field_fields_co_child')->referencedEntities();
          if ($fields_to_display) {
            foreach ($fields_to_display as $field) {
              $variables['co_child_fields'][] = $field->getName();
            }
          }
        }
      }
    }
    if ($variables['view_mode'] == 'asu_video' || $variables['view_mode'] == 'asu_audio' || $variables['view_mode'] == 'asu_document' || $variables['view_mode'] == 'asu_image' || $variables['view_mode'] == 'complex_object_child_box' || $variables['view_mode'] == 'full') {
      $default_config = \Drupal::config('asu_default_fields.settings');
      $origfile_term = $default_config->get('original_file_taxonomy_term');
      $origfile = \Drupal::entityTypeManager()->getStorage('media')->loadByProperties([
        'field_media_use' => ['target_id' => $origfile_term],
        'field_media_of' => ['target_id' => $node->id()],
      ]);
      if (count($origfile) > 0) {
        $origfile = reset($origfile);
      }
      else {
        $origfile = NULL;
      }
      $servicefile_term = $default_config->get('service_file_taxonomy_term');
      $servicefile = \Drupal::entityTypeManager()->getStorage('media')->loadByProperties([
        'field_media_use' => ['target_id' => $servicefile_term],
        'field_media_of' => ['target_id' => $node->id()],
      ]);
      if (count($servicefile) > 0) {
        $servicefile = reset($servicefile);
      }
      else {
        $servicefile = NULL;
      }
      if (isset($origfile)) {
        $of_access = $origfile->access('view', \Drupal::currentUser());
        $variables['original_file'] = $origfile;
        $variables['of_access'] = $of_access;
      }
      else {
        $variables['of_access'] = FALSE;
      }
      if (isset($servicefile)) {
        $sf_access = $servicefile->access('view', \Drupal::currentUser());
        $variables['service_file'] = $servicefile;
        $variables['sf_access'] = $sf_access;
      }
      else {
        $variables['sf_access'] = FALSE;
      }
      $field_model = $node->get('field_model')->entity;
      if ($field_model != NULL) {
        $field_model = $field_model->getName();
      }
      if ($field_model <> 'Complex Object' && ($variables['view_mode'] == "asu_audio" || $variables['view_mode'] == "asu_video" || $variables['view_mode'] == "complex_object_child_box")) {
        if (is_object($servicefile) && ($servicefile->bundle() == 'video' ||
        $servicefile->bundle() == 'audio')) {
          $variables['#attached']['library'] = 'asu_statistics/track';
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_paragraph()
 * Converts typed identifiers for DOI into links based on our use cases.
 */
function asulib_barrio_preprocess_paragraph(&$variables) {
  $paragraph = $variables['paragraph'];
  if ($paragraph->bundle() == 'typed_identifier' && $paragraph->hasField('field_identifier_type') &&
    !is_null($paragraph->get('field_identifier_type')->entity)) {
    $identifier_value = $paragraph->get('field_identifier_value')->value;
    // If the value has http:// or https:// then use that link value, else
    // create a link that is https://doi.
    preg_match_all('/^http(s?):\/\//m', $identifier_value, $matches, PREG_SET_ORDER, 0);
    $variables['Identifier_link_label'] = $paragraph->get('field_identifier_type')->referencedEntities()[0]->label();
    if (count($matches) > 0) {
      // Value is a link already.
      $url = Url::fromUri($identifier_value);
      $variables['Identifier_link'] = Link::fromTextAndUrl($identifier_value, $url);
    }
    // ONLY for DOI links, convert a string into the https://doi.org/{STRING_VALUE}.
    elseif ($paragraph->get('field_identifier_type')->referencedEntities()[0]->label() == 'Digital object identifier') {
      $url = Url::fromUri('https://doi.org/' . $identifier_value);
      $variables['Identifier_link'] = Link::fromTextAndUrl($identifier_value, $url);
    }
  }
}

/**
 * Implements hook_theme_suggestions_field_alter()
 * Add view mode to theme suggestions for fields
 */
function asulib_barrio_theme_suggestions_field_alter(&$suggestions, $variables) {
  $suggestions[] = 'field__node__' .
      $variables['element']['#field_name'] . '__' .
      $variables['element']['#bundle'] . '__' .
      $variables['element']['#view_mode'];
  $suggestions[] = 'field__node__' .
      $variables['element']['#bundle'] . '__' .
      $variables['element']['#view_mode'];
}

/**
 * Process block content.
 */
function asulib_barrio_preprocess_block(&$variables) {
  if ($variables['plugin_id'] == 'asu_item_is_part_of') {
    $variables['is_metadata_page'] = (\Drupal::routeMatch()->getRouteName() == "asu_item_extras.full_metadata_view");
  }
  if ($variables['plugin_id'] == "explore_this_item_block" && empty($variables['content'])) {
    $variables['attributes']['hidden'] = TRUE;
  }
}

/**
 * Preprocess user content.
 */
function asulib_barrio_preprocess_user(&$variables) {
  // // Helpful $content variable for templates.
  $account = $variables['elements']['#user'];
  if (array_key_exists('field_orcid_id', $variables['content'])) {
    $orcid_id = $account->get('field_orcid_id')->value;
    $url = Url::fromUri('https://orcid.org/' . $orcid_id);
    $link = Link::fromTextAndUrl($orcid_id, $url);
    $link = $link->toRenderable();
    $orcid_link = \Drupal::service('renderer')->render($link);
    $variables['content']['orchid'] = [
      '#type' => 'item',
      '#markup' => '<h4 class="label">ORCID ID</h4>' . $orcid_link,
      '#weight' => 1,
    ];
    // Remove the previous display for this field on the user page.
    unset($variables['content']['field_orcid_id']);
  }
}

/**
 * Implements hook_preprocess_page.
 */
function asulib_barrio_preprocess_page(&$variables) {
  $variables['site_name'] = \Drupal::config('system.site')->get('name');
  if (isset($variables['page']['sidebar_first']) && count($variables['page']['sidebar_first']) > 0) {
    $variables['content_attributes']['class'][] = 'col-md-8 mt-2';
    $variables['sidebar_first_attributes']['class'][] = 'collapse';
    $variables['sidebar_first_attributes']->removeClass('col-md-4');
  }
}

/**
 * Implements hook_preprocess_image()
 */
function asulib_barrio_preprocess_image(&$variables) {
  if ($variables['style_name'] == 'card_image') {
    $variables['attributes']['class'][] = 'card-img-top';
  }
}

/**
 * Implements hook_preprocess_views_exposed_form()
 */
function asulib_barrio_preprocess_views_exposed_form(&$variables) {
  if ($variables['form']['#id'] == "views-exposed-form-solr-search-content-page-3") {
    $variables['form']['actions']['submit']['#attributes']['title'] = 'Search collection';
  }
  elseif ($variables['form']['#id'] == "views-exposed-form-solr-search-content-page-1") {
    $variables['form']['actions']['submit']['#attributes']['title'] = 'Search';
  }
}

/**
 * Implements hoot_preprocess_media()
 */
function asulib_barrio_preprocess_media(&$variables) {
  if($variables['view_mode'] == 'scholarly_work_sidebar') {
    $variables['attributes']['class'][] = 'row d-flex align-items-center';
  }
}
