
{#
/**
 * @file
 * Bootstrap Barrio's theme implementation to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
     Only "getter" methods (method names starting with "get", "has", or "is")
     and a few common methods such as "id" and "label" are available. Calling
     other methods (such as node.delete) will result in an exception.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 */
#}
{{ attach_library('bootstrap_barrio/node') }}

{%
    set classes = [
    'node',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
    'card'
]
%}

{%
    set model_icons = {
        "Image": "far fa-file-image",
        "Audio": "far fa-file-audio",
        "Video": "far fa-file-video",
        "Digital Document": "far fa-file-alt",
        "Binary": "far fa-file",
        "Complex Object": "complex-object-icon",
        "Paged Content": "complex-object-icon",
    }

%}
<div {{ attributes.addClass(classes) }}>
	<div class="card-header card-header-icon">
		{% set mod = content.field_model[0]|render|trim %}
		{% if mod != "" %}
			{% for k, v in model_icons|filter((v, k) => k == mod) -%}
				<i class="{{ v }} fa-2x"></i>
			{% endfor %}
		{% else %}
			<i class="far fa-file-image fa-2x"></i>
		{% endif %}
		<h3 class="card-title">
			{% set title = content.field_title[0]|render|trim|slice(0, 60) %}
			{{ title|raw }}
			{% if content.field_title[0]|render|length > 60 %}
				...
			{% endif %}
		</h3>
	</div>
	<div class="card-body">
          <p class="card-text">
            {%  if changed_ago %}
              {{ changed_ago }} ago
            {% endif %}
          </p>
        </div>
        <div class="card-buttons"><div class="card-button">
          <a role="button" href="/items/{{ node.id }}" class="btn btn-md btn-primary">View Item</a>
        </div></div>
</div>

